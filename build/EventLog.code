.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
ENDS
ACCEPT
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro meet
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 16
; Decode addr
LDMSGADDR
ENDS
;; param: id
;; param: addr
; function meet
; expValue
;; fetch _clients
;; push identifier addr
DUP
GETGLOB 20
; end expValue
;; push identifier id
PUSH S3
; colValue
NEWC
STU 16
ROTREV
PUSHINT 267
DICTSETB
SETGLOB 20
; end colValue
; end function meet
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro logError
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 16
; Decode code
LDU 16
ENDS
;; param: id
;; param: code
; modifier log
; function logError
;; push identifier id
;; push identifier code
DUP2
TUPLE 2
; expValue
;; fetch _errors
;; push identifier _x
GETGLOB 21
GETGLOB 22
; end expValue
ROT
; colValue
UNTUPLE 2
SWAP
NEWC
STU 16
STU 16
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 22
; end colValue
; end function logError
; expValue
;; fetch _log
GETGLOB 27
; end expValue
;; ++
; expValue
;; fetch _x
GETGLOB 21
; end expValue
DUP
INC
UFITS 32
; colValue
SETGLOB 21
; end colValue
;; index
;; get member sender
GETGLOB 9
;; push identifier _clients
GETGLOB 20
PUSHINT 267
DICTGET
PUSHCONT {
	PLDU 16
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; push identifier now
NOW
;; uint32
;; array.push(..)
XCHG s2
NEWC
STU 32
STU 16
STU 32
SWAP
UNPAIR
PUSH S1
INC
XCHG s3
ROTREV
PUSHINT 32
DICTUSETB
PAIR
; colValue
SETGLOB 27
; end colValue
; end modifier log
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro logTransfer
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode tid
LDU 32
; Decode from
LDU 16
; Decode to
LDU 16
; Decode val
LDU 32
ENDS
;; param: tid
;; param: from
;; param: to
;; param: val
; modifier log
; function logTransfer
;; push identifier from
;; push identifier to
;; push identifier val
BLKPUSH 3, 2
;; push identifier tid
PUSH S6
TUPLE 4
; expValue
;; fetch _transfers
;; push identifier _x
GETGLOB 21
GETGLOB 23
; end expValue
ROT
; colValue
UNTUPLE 4
REVERSE 4, 0
NEWC
STU 16
STU 16
STU 32
STU 32
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 23
; end colValue
; end function logTransfer
; expValue
;; fetch _log
GETGLOB 27
; end expValue
;; ++
; expValue
;; fetch _x
GETGLOB 21
; end expValue
DUP
INC
UFITS 32
; colValue
SETGLOB 21
; end colValue
;; index
;; get member sender
GETGLOB 9
;; push identifier _clients
GETGLOB 20
PUSHINT 267
DICTGET
PUSHCONT {
	PLDU 16
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; push identifier now
NOW
;; uint32
;; array.push(..)
XCHG s2
NEWC
STU 32
STU 16
STU 32
SWAP
UNPAIR
PUSH S1
INC
XCHG s3
ROTREV
PUSHINT 32
DICTUSETB
PAIR
; colValue
SETGLOB 27
; end colValue
; end modifier log
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro logRecord
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 16
; Decode val
LDI 32
ENDS
;; param: id
;; param: val
; modifier log
; function logRecord
;; push identifier id
;; push identifier val
DUP2
TUPLE 2
; expValue
;; fetch _records
;; push identifier _x
GETGLOB 21
GETGLOB 24
; end expValue
ROT
; colValue
UNTUPLE 2
SWAP
NEWC
STU 16
STI 32
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 24
; end colValue
; end function logRecord
; expValue
;; fetch _log
GETGLOB 27
; end expValue
;; ++
; expValue
;; fetch _x
GETGLOB 21
; end expValue
DUP
INC
UFITS 32
; colValue
SETGLOB 21
; end colValue
;; index
;; get member sender
GETGLOB 9
;; push identifier _clients
GETGLOB 20
PUSHINT 267
DICTGET
PUSHCONT {
	PLDU 16
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; push identifier now
NOW
;; uint32
;; array.push(..)
XCHG s2
NEWC
STU 32
STU 16
STU 32
SWAP
UNPAIR
PUSH S1
INC
XCHG s3
ROTREV
PUSHINT 32
DICTUSETB
PAIR
; colValue
SETGLOB 27
; end colValue
; end modifier log
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro logEvent
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 16
; Decode eType
LDU 8
; Decode s
LDU 8
; Decode eventID
LDU 32
ENDS
;; param: id
;; param: eType
;; param: s
;; param: eventID
; modifier log
; function logEvent
;; push identifier id
;; push identifier eType
;; push identifier s
;; push identifier eventID
BLKPUSH 4, 3
TUPLE 4
; expValue
;; fetch _events
;; push identifier _x
GETGLOB 21
GETGLOB 25
; end expValue
ROT
; colValue
UNTUPLE 4
REVERSE 4, 0
NEWC
STU 16
STU 8
STU 8
STU 32
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 25
; end colValue
;; if
;; push identifier s
PUSH S1
;; ==
;; get member Failed
EQINT 7
PUSHCONT {
	;; Remote call EventLog.logError
	;; push identifier this
	; call function of this
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x4017d7840000000000000000000000000000fa768efb_
	STSLICER
	;; id
	;; push identifier id
	PUSH S4
	STUR 16
	;; code
	PUSHINT 321
	STUR 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
;; end if
; end function logEvent
; expValue
;; fetch _log
GETGLOB 27
; end expValue
;; ++
; expValue
;; fetch _x
GETGLOB 21
; end expValue
DUP
INC
UFITS 32
; colValue
SETGLOB 21
; end colValue
;; index
;; get member sender
GETGLOB 9
;; push identifier _clients
GETGLOB 20
PUSHINT 267
DICTGET
PUSHCONT {
	PLDU 16
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; push identifier now
NOW
;; uint32
;; array.push(..)
XCHG s2
NEWC
STU 32
STU 16
STU 32
SWAP
UNPAIR
PUSH S1
INC
XCHG s3
ROTREV
PUSHINT 32
DICTUSETB
PAIR
; colValue
SETGLOB 27
; end colValue
; end modifier log
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro logDeploy
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 16
; Decode s
LDU 8
ENDS
;; param: id
;; param: s
; modifier log
; function logDeploy
;; push identifier id
;; push identifier s
DUP2
TUPLE 2
; expValue
;; fetch _deploys
;; push identifier _x
GETGLOB 21
GETGLOB 26
; end expValue
ROT
; colValue
UNTUPLE 2
SWAP
NEWC
STU 16
STU 8
ROTREV
PUSHINT 32
DICTUSETB
SETGLOB 26
; end colValue
; end function logDeploy
; expValue
;; fetch _log
GETGLOB 27
; end expValue
;; ++
; expValue
;; fetch _x
GETGLOB 21
; end expValue
DUP
INC
UFITS 32
; colValue
SETGLOB 21
; end colValue
;; index
;; get member sender
GETGLOB 9
;; push identifier _clients
GETGLOB 20
PUSHINT 267
DICTGET
PUSHCONT {
	PLDU 16
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
;; push identifier now
NOW
;; uint32
;; array.push(..)
XCHG s2
NEWC
STU 32
STU 16
STU 32
SWAP
UNPAIR
PUSH S1
INC
XCHG s3
ROTREV
PUSHINT 32
DICTUSETB
PAIR
; colValue
SETGLOB 27
; end colValue
; end modifier log
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getAll
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
;; ret param: errors
;; ret param: transfers
;; ret param: records
;; ret param: events
;; ret param: deploys
; function getAll
; expValue
; end expValue
;; push identifier _errors
; colValue
; end colValue
; expValue
; end expValue
;; push identifier _transfers
; colValue
; end colValue
; expValue
; end expValue
;; push identifier _records
; colValue
; end colValue
; expValue
; end expValue
;; push identifier _events
; colValue
; end colValue
; expValue
; end expValue
;; push identifier _deploys
; colValue
GETGLOB 22
GETGLOB 23
GETGLOB 24
GETGLOB 25
GETGLOB 26
; end colValue
; end function getAll
;; emitting 5 value(s)
PUSH S5
EQINT -1
PUSHCONT {
	PUSH S7
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 97
	STZEROES
	STSLICECONST 1
	NEWC
	STSLICECONST xd55ed7da
	PUSH S6
	SWAP
	STDICT
	PUSH S5
	SWAP
	STDICT
	PUSH S4
	SWAP
	STDICT
	PUSH S3
	NEWC
	STDICT
	PUSH S3
	SWAP
	STDICT
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
BLKDROP 5
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getErrorsExt
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
;; ret param: errors
PUSHINT 0
NEWDICT
PAIR
;; ret param: details
PUSHINT 0
NEWDICT
PAIR
; function getErrorsExt
;; push identifier _errors
GETGLOB 22
DUP
PUSHINT 32
DICTUMIN
PUSHCONT {
	DUP
	ROT
	LDU 16
	PLDU 16
	TUPLE 2
}
PUSHCONT {
	NULL
	NULL
	NULL
}
IFELSE
PUSHCONT {
	PUSH S2
	ISNULL
	NOT
}
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier error
	PUSH2 S5, S0
	;; array.push(..)
	UNTUPLE 2
	SWAP
	NEWC
	STU 16
	STU 16
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S6
	; end colValue
	; expValue
	; end expValue
	;; index
	;; push identifier x
	PUSH2 S4, S1
	;; push identifier _log
	GETGLOB 27
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	LDU 32
	LDU 16
	PLDU 32
	;; array.push(..)
	XCHG s2
	NEWC
	STU 32
	STU 16
	STU 32
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S5
	; end colValue
	PUSH2 S2, S3
	PUSHINT 32
	DICTUGETNEXT
	PUSHCONT {
		DUP
		ROT
		LDU 16
		PLDU 16
		TUPLE 2
	}
	PUSHCONT {
		NULL
		NULL
		NULL
	}
	IFELSE
	BLKDROP2 3, 3
}
WHILE
BLKDROP 4
; end for
; end function getErrorsExt
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000027cc34fae_
	STSLICER
	PUSH S2
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro purgeAll
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function purgeAll
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 22
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 23
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 24
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 25
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 26
; end colValue
;; delete
; expValue
; end expValue
PUSHINT 0
NEWDICT
PAIR
; colValue
SETGLOB 27
; end colValue
; end function purgeAll
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_error_internal
.type	_error_internal, @function
CALL $_error_internal_macro$

.macro _error_internal_macro
;; param: id
;; param: code
; function _error
;; if
;; push identifier _logLevel
GETGLOB 17
;; &
PUSHINT 1
AND
GTINT 0
PUSHCONT {
	;; Remote call IEventLog.logError
	;; push identifier _eventLog
	GETGLOB 13
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x4017d7840000000000000000000000000000fa768efb_
	STSLICER
	;; id
	;; push identifier id
	PUSH S2
	STUR 16
	;; code
	;; push identifier code
	PUSH S1
	STUR 16
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
;; end if
; end function _error
DROP2

.globl	_checkTonBalance_internal
.type	_checkTonBalance_internal, @function
CALL $_checkTonBalance_internal_macro$

.macro _checkTonBalance_internal_macro
; function _checkTonBalance
;; get member balance
GETPARAM 7
INDEX 0
;; uint64
UFITS 64
;; decl: tonBalance
;; if
;; push identifier tonBalance
DUP
;; <
;; push identifier _warnBalance
GETGLOB 19
LESS
PUSHCONT {
	;; Remote call IRoot.updateTonBalance
	;; push identifier _root
	GETGLOB 14
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x402625a00000000000000000000000000000e5f7ae0d_
	STSLICER
	;; id
	;; push identifier _id
	GETGLOB 11
	STUR 16
	;; tonBalance
	;; push identifier tonBalance
	PUSH S1
	STUR 64
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
;; end if
DROP
; end function _checkTonBalance

.macro initMember
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode id
LDU 16
; Decode console
LDMSGADDR
; Decode eventLog
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode medium
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode dashboard
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode logLevel
LDUQ 16
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 16
}
IFNOT
ENDS
;; param: id
;; param: console
;; param: eventLog
;; param: root
;; param: medium
;; param: dashboard
;; param: logLevel
; function initMember
; expValue
; end expValue
;; push identifier id
PUSH S6
; colValue
SETGLOB 11
; end colValue
;; push identifier console
;; push identifier eventLog
;; push identifier root
;; push identifier medium
;; push identifier dashboard
;; push identifier logLevel
BLKPUSH 6, 5
CALLREF {
	CALL $_setEnv_internal_macro$
}
; end function initMember
BLKDROP 7
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_setEnv_internal
.type	_setEnv_internal, @function
CALL $_setEnv_internal_macro$

.macro _setEnv_internal_macro
;; param: console
;; param: eventLog
;; param: root
;; param: medium
;; param: dashboard
;; param: logLevel
; function _setEnv
; expValue
; end expValue
;; push identifier console
PUSH S5
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier eventLog
PUSH S4
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
;; push identifier root
PUSH S3
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
;; push identifier medium
PUSH S2
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
;; push identifier dashboard
PUSH S1
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
;; push identifier logLevel
DUP
; colValue
SETGLOB 17
; end colValue
; expValue
;; fetch _clients
;; push identifier console
PUSH S5
GETGLOB 20
; end expValue
PUSHINT 10
; colValue
NEWC
STU 16
ROTREV
PUSHINT 267
DICTSETB
; end colValue
; expValue
;; fetch _clients
DUP
SETGLOB 20
;; push identifier eventLog
PUSH S5
SWAP
; end expValue
PUSHINT 20
; colValue
NEWC
STU 16
ROTREV
PUSHINT 267
DICTSETB
; end colValue
; expValue
;; fetch _clients
DUP
SETGLOB 20
;; push identifier root
PUSH S4
SWAP
; end expValue
PUSHINT 30
; colValue
NEWC
STU 16
ROTREV
PUSHINT 267
DICTSETB
; end colValue
; expValue
;; fetch _clients
DUP
SETGLOB 20
;; push identifier medium
PUSH S3
SWAP
; end expValue
PUSHINT 40
; colValue
NEWC
STU 16
ROTREV
PUSHINT 267
DICTSETB
; end colValue
; expValue
;; fetch _clients
DUP
SETGLOB 20
;; push identifier dashboard
PUSH S2
SWAP
; end expValue
PUSHINT 50
; colValue
NEWC
STU 16
ROTREV
PUSHINT 267
DICTSETB
SETGLOB 20
; end colValue
; end function _setEnv
BLKDROP 6

.macro updateEnv
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode console
LDMSGADDR
; Decode eventLog
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode medium
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode dashboard
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode logLevel
LDUQ 16
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 16
}
IFNOT
ENDS
;; param: console
;; param: eventLog
;; param: root
;; param: medium
;; param: dashboard
;; param: logLevel
; function updateEnv
;; push identifier console
;; push identifier eventLog
;; push identifier root
;; push identifier medium
;; push identifier dashboard
;; push identifier logLevel
BLKPUSH 6, 5
CALLREF {
	CALL $_setEnv_internal_macro$
}
; end function updateEnv
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getEnv
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $getEnv_internal_macro$
}
;; emitting 7 value(s)
PUSH S7
EQINT -1
PUSHCONT {
	PUSH S9
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 97
	STZEROES
	STSLICECONST 1
	NEWC
	STSLICECONST xdff1c3fa
	PUSH S8
	STUR 16
	PUSH S7
	STSLICER
	PUSH S6
	STSLICER
	PUSH S5
	STSLICER
	NEWC
	PUSH S5
	STSLICER
	PUSH S4
	STSLICER
	PUSH S3
	STUR 16
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
BLKDROP 7
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getEnv_internal
.type	getEnv_internal, @function
CALL $getEnv_internal_macro$

.macro getEnv_internal_macro
;; ret param: id
PUSHINT 0
;; ret param: console
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: eventLog
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: root
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: medium
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: dashboard
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: logLevel
PUSHINT 0
; function getEnv
;; return
;; push identifier _id
GETGLOB 11
;; push identifier _console
GETGLOB 12
;; push identifier _eventLog
GETGLOB 13
;; push identifier _root
GETGLOB 14
;; push identifier _medium
GETGLOB 15
;; push identifier _dashboard
GETGLOB 16
;; push identifier _logLevel
GETGLOB 17
BLKDROP2 7, 7
; end function getEnv

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 14
GETGLOB 15
GETGLOB 16
GETGLOB 19
GETGLOB 23
GETGLOB 24
GETGLOB 25
GETGLOB 26
REVERSE 9, 0
STSLICE
STSLICE
STSLICE
STU 64
STDICT
STDICT
STDICT
STDICT
NEWC
GETGLOB 27
UNTUPLE 2
XCHG s2
STU 32
STDICT
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 17
GETGLOB 18
GETGLOB 21
GETGLOB 20
GETGLOB 22
REVERSE 12, 0
STBREF
STBREF
STU 8
STU 16
STSLICE
STSLICE
STU 16
STU 8
STU 32
STDICT
STDICT
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
LDMSGADDR
LDMSGADDR
LDU 64
LDDICT
LDDICT
LDDICT
PLDDICT
SETGLOB 26
SETGLOB 25
SETGLOB 24
SETGLOB 23
SETGLOB 19
SETGLOB 16
SETGLOB 15
SETGLOB 14
LDREFRTOS
LDU 32
PLDDICT
PAIR
SETGLOB 27
LDU 8
LDU 16
LDMSGADDR
LDMSGADDR
LDU 16
LDU 8
LDU 32
LDDICT
PLDDICT
SETGLOB 22
SETGLOB 20
SETGLOB 21
SETGLOB 18
SETGLOB 17
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	LDMSGADDR
	LDU 64
	LDDICT
	LDDICT
	LDDICT
	PLDDICT
	SETGLOB 26
	SETGLOB 25
	SETGLOB 24
	SETGLOB 23
	SETGLOB 19
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	LDREFRTOS
	LDU 32
	PLDDICT
	PAIR
	SETGLOB 27
	LDU 8
	LDU 16
	LDMSGADDR
	LDMSGADDR
	LDU 16
	LDU 8
	LDU 32
	LDDICT
	PLDDICT
	SETGLOB 22
	SETGLOB 20
	SETGLOB 21
	SETGLOB 18
	SETGLOB 17
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _version
	PUSHINT 0
	SETGLOB 10
	; init _id
	PUSHINT 0
	SETGLOB 11
	; init _console
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 12
	; init _eventLog
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 13
	; init _root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init _medium
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	; init _dashboard
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 16
	; init _logLevel
	PUSHINT 0
	SETGLOB 17
	; init _transferFee
	PUSHINT 0
	SETGLOB 18
	; init _warnBalance
	PUSHINT 0
	SETGLOB 19
	; init _clients
	NEWDICT
	SETGLOB 20
	; init _x
	PUSHINT 0
	SETGLOB 21
	; init _errors
	NEWDICT
	SETGLOB 22
	; init _transfers
	NEWDICT
	SETGLOB 23
	; init _records
	NEWDICT
	SETGLOB 24
	; init _events
	NEWDICT
	SETGLOB 25
	; init _deploys
	NEWDICT
	SETGLOB 26
	; init _log
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 27
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: _version
	PUSHINT 30
	SETGLOB 10
	;; init state var: _transferFee
	PUSHINT 1
	SETGLOB 18
	;; init state var: _warnBalance
	PUSHINT 1990000000
	SETGLOB 19
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro _clients
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 20
PUSHSLICE xc0000000000000000000000000dccdc55c
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _errors
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 22
PUSHSLICE xc00000000000000000000000008b221fc4
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _transfers
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 23
PUSHSLICE xc0000000000000000000000000a8716152
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _records
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 24
PUSHSLICE xc00000000000000000000000008ec43d0f
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _events
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 25
PUSHSLICE xc0000000000000000000000000abc60ff4
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _deploys
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 26
PUSHSLICE xc000000000000000000000000090de30bd
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _log
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 27
PUSHSLICE xc0000000000000000000000000cdfe52db
NEWC
STSLICE
PUSH S1
UNPAIR
XCHG s2
STU 32
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 523293675
LEQ
PUSHCONT {
	DUP
	PUSHINT 186785732
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 56245606
		EQUAL
		IFJMPREF {
			CALL $logDeploy$
		}
		DUP
		PUSHINT 186785732
		EQUAL
		IFJMPREF {
			CALL $_errors$
		}
	}
	IFJMP
	DUP
	PUSHINT 282996925
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 247741711
		EQUAL
		IFJMPREF {
			CALL $_records$
		}
		DUP
		PUSHINT 282996925
		EQUAL
		IFJMPREF {
			CALL $_deploys$
		}
	}
	IFJMP
	DUP
	PUSHINT 523293675
	EQUAL
	IFJMPREF {
		CALL $getErrorsExt$
	}
}
IFJMP
DUP
PUSHINT 884739032
LEQ
PUSHCONT {
	DUP
	PUSHINT 656105679
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 557082282
		EQUAL
		IFJMPREF {
			CALL $logRecord$
		}
		DUP
		PUSHINT 656105679
		EQUAL
		IFJMPREF {
			CALL $updateEnv$
		}
	}
	IFJMP
	DUP
	PUSHINT 734400500
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 678519122
		EQUAL
		IFJMPREF {
			CALL $_transfers$
		}
		DUP
		PUSHINT 734400500
		EQUAL
		IFJMPREF {
			CALL $_events$
		}
	}
	IFJMP
	DUP
	PUSHINT 884739032
	EQUAL
	IFJMPREF {
		CALL $meet$
	}
}
IFJMP
DUP
PUSHINT 1482910856
LEQ
PUSHCONT {
	DUP
	PUSHINT 1308512987
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1186060154
		EQUAL
		IFJMPREF {
			CALL $logTransfer$
		}
		DUP
		PUSHINT 1308512987
		EQUAL
		IFJMPREF {
			CALL $_log$
		}
	}
	IFJMP
	DUP
	PUSHINT 1466004458
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1432279002
		EQUAL
		IFJMPREF {
			CALL $getAll$
		}
		DUP
		PUSHINT 1466004458
		EQUAL
		IFJMPREF {
			CALL $purgeAll$
		}
	}
	IFJMP
	DUP
	PUSHINT 1482910856
	EQUAL
	IFJMPREF {
		CALL $logEvent$
	}
}
IFJMP
DUP
PUSHINT 2101036925
LEQ
PUSHCONT {
	DUP
	PUSHINT 1609679866
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1556989276
		EQUAL
		IFJMPREF {
			CALL $_clients$
		}
		DUP
		PUSHINT 1609679866
		EQUAL
		IFJMPREF {
			CALL $getEnv$
		}
	}
	IFJMP
	DUP
	PUSHINT 2024728029
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1756716863
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
		DUP
		PUSHINT 2024728029
		EQUAL
		IFJMPREF {
			CALL $initMember$
		}
	}
	IFJMP
	DUP
	PUSHINT 2101036925
	EQUAL
	IFJMPREF {
		CALL $logError$
	}
}
IFJMP
